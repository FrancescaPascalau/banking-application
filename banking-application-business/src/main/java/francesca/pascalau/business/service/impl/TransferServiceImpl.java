package francesca.pascalau.business.service.impl;

import francesca.pascalau.business.entity.TransferBusiness;
import francesca.pascalau.business.entity.TransferDeniedException;
import francesca.pascalau.business.service.api.TransferService;
import francesca.pascalau.data.api.*;
import francesca.pascalau.data.entity.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Random;

/**
 * In this class it is implemented the logic of the transaction generated by the Transaction Agent.
 * It uses the beans from repository to use some CRUD operation available.
 */

@Service
public class TransferServiceImpl implements TransferService {

    @Autowired
    private TransferRepository repository;

    @Autowired
    private AccountRepository accountRepository;

    @Transactional
    public void transfer(TransferBusiness transferBusiness) throws TransferDeniedException {

        Account senderAccount = accountRepository.findByName(transferBusiness.getSender());
        Account receiverAccount = accountRepository.findByName(transferBusiness.getReceiver());

        Transfer transfer = new Transfer();

        if (senderAccount.getCustomer().getBank().equals(receiverAccount.getCustomer().getBank())) {
            transfer.setTransferType(TransferType.INTRABANK);
            if (transferBusiness.getAmount() <= senderAccount.getValue()) {
                transfer.setValueToTransfer(transferBusiness.getAmount());
                transfer.setSender(senderAccount);
                transfer.setReceiver(receiverAccount);
                senderAccount.setValue(senderAccount.getValue() - transfer.getValueToTransfer());
                senderAccount.addTransferSent(transfer);
                receiverAccount.setValue(receiverAccount.getValue() + transfer.getValueToTransfer());
                receiverAccount.addTransferReceived(transfer);
            } else {
                throw new TransferDeniedException("Not enough money in account to complete the intra-bank transfer");
            }
        } else {
            transfer.setTransferType(TransferType.INTERBANK);
            if (interbankConditionsAccepted(transferBusiness, senderAccount)) {
                transfer.setValueToTransfer(transferBusiness.getAmount() + TransferType.INTERBANK.getComission());
                if (transfer.getValueToTransfer() < 1000) {
                    transfer.setSender(senderAccount);
                    transfer.setReceiver(receiverAccount);
                    senderAccount.setValue(senderAccount.getValue() - transfer.getValueToTransfer() - TransferType.INTERBANK.getComission());
                    senderAccount.addTransferSent(transfer);
                    receiverAccount.setValue(receiverAccount.getValue() + transfer.getValueToTransfer());
                    receiverAccount.addTransferReceived(transfer);
                } else {
                    throw new TransferDeniedException("The transfer amount exceeds the limit of 1000â‚¬ per transfer");
                }
            } else {
                throw new TransferDeniedException("Not enough money in account to complete the inter-bank transfer");
            }
        }

        //Update the account value for the sender
        accountRepository.updateAmount(senderAccount.getName(), senderAccount.getValue());

        //Update the account value for the receiver
        accountRepository.updateAmount(receiverAccount.getName(), receiverAccount.getValue());

        //Save the transfer to the database to have access to it from the account information
        repository.save(transfer);
    }

    private boolean interbankConditionsAccepted(TransferBusiness transferBusiness, Account senderAccount) {
        return transferBusiness.getAmount() <= (senderAccount.getValue() - TransferType.INTERBANK.getComission())
                && !interbankFailurePercentage();
    }

    private boolean interbankFailurePercentage() {
        boolean transferFailed = false;
        Random transferPercentage = new Random();
        int failurePercentage = transferPercentage.nextInt(10) + 1;
        if (failurePercentage <= 3) {
            transferFailed = true;
        }
        return transferFailed;
    }
}
